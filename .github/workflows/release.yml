name: Build and Test

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Test build
      run: |
        go mod tidy
        go build -o srs .
        ./srs version

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build binaries
      run: |
        # Get version info
        VERSION="v$(date -u '+%Y%m%d')-${GITHUB_SHA::8}"
        COMMIT=${GITHUB_SHA::8}
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        # Build flags with version info
        LDFLAGS="-X 'main.Version=${VERSION}' -X 'main.GitCommit=${COMMIT}' -X 'main.BuildTime=${BUILD_TIME}'"
        
        # Build for different platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o srs-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o srs-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o srs-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o srs-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o srs-windows-amd64.exe .
        
        # Make them executable
        chmod +x srs-*
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v$(date -u '+%Y%m%d')-${GITHUB_SHA::8}"
        name: "Release v$(date -u '+%Y%m%d')-${GITHUB_SHA::8}"
        files: |
          srs-linux-amd64
          srs-linux-arm64
          srs-darwin-amd64
          srs-darwin-arm64
          srs-windows-amd64.exe
        body: |
          ## Easy Installation (Recommended)
          
          ```bash
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          ```
          
          This installs to `~/.local/bin` (no sudo required).
          
          ## Manual Installation
          
          Download the binary for your platform and install to your user directory:
          
          ### Linux (x64)
          ```bash
          mkdir -p ~/.local/bin
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/srs-linux-amd64 -o ~/.local/bin/srs
          chmod +x ~/.local/bin/srs
          export PATH="$HOME/.local/bin:$PATH"
          ```
          
          ### Linux (ARM64)
          ```bash
          mkdir -p ~/.local/bin
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/srs-linux-arm64 -o ~/.local/bin/srs
          chmod +x ~/.local/bin/srs
          export PATH="$HOME/.local/bin:$PATH"
          ```
          
          ### macOS (Intel)
          ```bash
          mkdir -p ~/.local/bin
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/srs-darwin-amd64 -o ~/.local/bin/srs
          chmod +x ~/.local/bin/srs
          export PATH="$HOME/.local/bin:$PATH"
          ```
          
          ### macOS (Apple Silicon)
          ```bash
          mkdir -p ~/.local/bin
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/srs-darwin-arm64 -o ~/.local/bin/srs
          chmod +x ~/.local/bin/srs
          export PATH="$HOME/.local/bin:$PATH"
          ```
          
          ## Quick Start
          ```bash
          # Create a simple card
          mkdir my-deck
          echo "# What is 2 + 2?" > my-deck/math.md
          echo "" >> my-deck/math.md
          echo "---" >> my-deck/math.md
          echo "" >> my-deck/math.md
          echo "# 4" >> my-deck/math.md
          
          # Start reviewing
          srs review my-deck
          ```
        generate_release_notes: true